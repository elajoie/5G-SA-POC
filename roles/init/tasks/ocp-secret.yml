---
# tasks file for ocp-prep
- name: Create install_config
  become: true
  tags: install
  block:
    # go here to get your long lived access toekn https://cloud.redhat.com/openshift/token
    - name: Generate access token with offline token
      uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        body:
        - [ grant_type, refresh_token ]
        - [ client_id, cloud-services ]
        - [ refresh_token, "{{ vault_token_long }}" ]
      register: access_tokens

    - name: Generate pull secret from access_token
      uri:
        url: https://api.openshift.com/api/accounts_mgmt/v1/access_token
        method: POST
        headers:
          Content-Type: application/yaml
          Authorization: "Bearer {{ access_tokens.json.access_token }}"
      register: pull_secret

    - name: Clean out old folders
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ ocp_folders }}"
      ignore_errors: yes

    - name: Create directories for OCP install
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items: "{{ ocp_folders }}"

#    - name: Generate SSH keys on Bastion
#      openssh_keypair:
#        path: /root/.ssh/id_rsa
#      register: sshkey

    - name: Template a install_config file to ignition dir
      template:
        src: install-config.yaml.j2
        dest: "{{ ign_folder }}/install-config.yaml"
        mode: '0755'

    - name: Download VM image for install
      get_url:
        url: "{{ item.value }}"
        dest: "/var/www/html/images/{{ item.key }}"
        mode: '0755'
      with_dict:
        "rootfs": "{{ ocp_rootfs }}"
        "kernel": "{{ ocp_kernel }}"
        "initramfs": "{{ ocp_initramfs }}"

    - name: Copy file for RHCOS PXE boot off TFTP
      copy:
        remote_src: yes
        src: "/var/www/html/images/{{ item }}"
        dest: "{{ tftp_dir }}/{{ item }}"
        mode: '0755'
      with_items:
        - rootfs
        - kernel
        - initramfs

    - name: Download Openshift installer
      unarchive:
        src: "{{ item }}"
        dest: /root/bin/
        remote_src: yes
      with_items:
        - "{{ ocp_mirror }}/clients/ocp/{{ ocp_release }}/openshift-install-linux-{{ ocp_release }}.tar.gz"
        - "{{ ocp_mirror }}/clients/ocp/{{ ocp_release }}/openshift-client-linux-{{ ocp_release }}.tar.gz"

    - name: Create manifest files
      command: "/root/bin/openshift-install create manifests"
      args:
        chdir: "{{ ign_folder }}"

#    - name: Make the masters schedulable
#      lineinfile:
#        path: "{{ ign_folder }}/manifests/cluster-scheduler-02-config.yml"
#        regexp: "^  mastersSchedulable"
#        line: "  mastersSchedulable: true"

    - name: Create ignition files
      command: "/root/bin/openshift-install create ignition-configs"
      args:
        chdir: "{{ ign_folder }}"

    - name: Copy to specific master and worker ignitions
      copy:
        remote_src: yes
        src: "{{ ign_folder }}/{{ item.name | regex_replace('[0-9]') }}.ign"
        dest: "{{ ign_folder }}/{{ item.name }}.ign"
      with_items:
        - "{{ nodes.masters }}"
        - "{{ nodes.workers }}"
        - "{{ nodes.workers_bm }}"

#If the machines enter emergency mode then validate the ignition here: https://coreos.com/validate/
    - name: Edit the worker and master ignitions to set hostname
      replace:
        path: "{{ ign_folder }}/{{ item.name }}.ign"
        regexp: '"storage":{}'
        replace: '"storage":{"files":[{"filesystem":"root","path":"/etc/hostname","mode":420,"overwrite":true,"contents":{"source":"data:,{{ item.name }}"}}]}'
      with_items:
        - "{{ nodes.masters }}"
        - "{{ nodes.workers }}"
        - "{{ nodes.workers_bm }}"

    - name: Set permissions
      file:
        dest: /var/www/html
        state: directory
        mode: 0755
        recurse: true